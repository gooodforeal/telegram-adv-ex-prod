import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from src.config import settings
from src.logs.config import configure_logging
from src.keyboards.admin_kb import get_admin_kb
from src.repositories.users_repository import UsersRepository
from src.repositories.accounts_repository import AccountsRepository

logger = logging.getLogger(__name__)
configure_logging()

router = Router()


@router.message(F.text.startswith('add:'))
async def command_admin(message: Message):
    if message.from_user.id == settings.ADMIN_ID:
        try:
            account_dto = [
                {
                    "username": acc.split(":")[0],
                    "password": acc.split(":")[1],
                    "games": acc.split(":")[2]
                }
                for acc in message.text.split("\n")[1::]
            ]
            await AccountsRepository.add_many(data=account_dto)
            await message.answer(
                text=f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É!"
            )

        except Exception as ex:
            logger.error("Invalid data format %s", ex)
            await message.answer(
                text=f"‚õîÔ∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö!"
            )
    else:
        await message.answer(
            text=f"‚õîÔ∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
        )


@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def command_admin(message: Message):
    if message.from_user.id == settings.ADMIN_ID:
        await message.answer(
            text=f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:"
                 f"\n\nadd:\nlogin1:password1:games1\nlogin2:password:games2!"
        )
    else:
        await message.answer(
            text=f"‚õîÔ∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
        )


@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
async def command_admin(message: Message):
    if message.from_user.id == settings.ADMIN_ID:
        accounts_list = await AccountsRepository.find_all()
        formated_list = [
            f"ID: {acc.id}\n"
            f"üë§ –õ–æ–≥–∏–Ω: {acc.username}\n"
            f"üîê –ü–∞—Ä–æ–ª—å: {acc.password}\n"
            f"üéÆ –ò–≥—Ä—ã: {acc.games}"
            for acc in accounts_list
        ]
        if len(formated_list):
            for acc in formated_list:
                await message.answer(
                    text=acc
                )
        else:
            await message.answer(
                text="üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç!"
            )
    else:
        await message.answer(
            text=f"‚õîÔ∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
        )


@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def command_admin(message: Message):
    if message.from_user.id == settings.ADMIN_ID:
        users_list = await UsersRepository.find_all()
        formated_list = [
            f"üìå ID: {user.id}\n"
            f"üìå TG_ID: {user.tg_id}\n"
            f"‚è∞ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at}\n"
            f"üì≤ –ü–æ—Å–ª–µ–¥–Ω—è—è –≤—ã–¥–∞—á–∞: {user.last_time_given}\n"
            f"üë§ –†–µ—Ñ–µ—Ä–∞–ª: {user.is_reffed}"
            for user in users_list
        ]
        if len(formated_list):
            for user in formated_list:
                await message.answer(
                    text=user
                )
        else:
            await message.answer(
                text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç!"
            )
    else:
        await message.answer(
            text=f"‚õîÔ∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
        )


@router.message(Command("admin"))
async def command_admin(message: Message):
    logger.info("New admin panel request from user: %r", message.from_user.id)
    if message.from_user.id == settings.ADMIN_ID:
        await message.answer(
            text=f"–í—ã –∞–¥–º–∏–Ω!",
            reply_markup=get_admin_kb()
        )
    else:
        await message.answer(
            text=f"‚õîÔ∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
        )
